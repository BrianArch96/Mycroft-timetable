import requests
from .module import Module
from .lecture import Lecture
from .timetable import Timetable
from requests.exceptions import RequestException
from contextlib import closing
from bs4 import BeautifulSoup
from datetime import datetime

URL = 'https://www.timetable.ul.ie/tt2.asp'
MODULE_DETAILS_URL = 'https://www.timetable.ul.ie/tt_moduledetails_res.asp'
MODULE_URL = 'https://www.timetable.ul.ie/mod_res.asp'
MODULE_NAME_INDEX = 3

def format_module_details(module):
    print("reeee")
    if not module:
        print("No module here")
        return
    try:
        module.name.capitalize()
        module.lecturer.capitalize()
        print("yurt")
    except Exception as e:
        print(e)

def get_module_details(module_code):
    print("Hey")
    module_name = moduledetails_request(module_code)
    module_lecturer = module_lecturer_request(module_code)
    module_ref = Module(module_name, module_lecturer)
    format_module_details(module_ref)
    print(module_ref.name)
    print("boo")
    return module_ref

def simple_get(s_id):
    """
    Attempts to get the content at `url` by making an HTTP GET request.
    If the content-type of response is some kind of HTML/XML, return the
    text content, otherwise return None.
    """
    payload = {'T1': s_id}
    session = requests.Session()
    try:
        result = session.post(URL, data=payload)
    except RequestException as e:
        log_error('Did not work')
        print(e)
        return None
    timetable = parse(result.text)
    return timetable


def is_good_response(resp):
   
    content_type = resp.headers['Content-Type'].lower()
    return (resp.status_code == 200 
            and content_type is not None 
            and content_type.find('html') > -1)


def module_lecturer_request(module_id):
    payload = {'T1': module_id}
    session = requests.Session()
    try:
        result = session.post(MODULE_URL, data=payload)
    except RequestException as e:
        log_error("Did not work")
        print(e)
        return None
    module_lecturer = parse_module_lecturer(result.text)
    return module_lecturer

def parse_module_lecturer(module_details):
    
    soup = BeautifulSoup(module_details, 'html.parser')
    results = soup.find_all('td', attrs={'valign':'top'})
    if not results:
        return None
    for day in results:
        lectures = day.find_all('font', attrs={'size':'1'})
        if not lectures:
            continue
        for lecture in lectures:
            lecture_raw = lecture.find('b').get_text()
            newstr = lecture_raw.replace('-','')
            attrs = newstr.split()
            if (str(attrs[2]) == 'LEC'):
                lecturer = str(attrs[4]) + " " + str(attrs[3])
                return lecturer
    return None

def moduledetails_request(module_id):
    payload = {'T1': module_id}
    session = requests.Session()
    try:
        result = session.post(MODULE_DETAILS_URL, data=payload)
    except RequestException as e:
        log_error("Didn't work bro")
        print(e)
        return None
    module_name = parse_module_details(result.text)
    return module_name

def parse_module_details(module_details_html):
    soup = BeautifulSoup(module_details_html, 'html.parser')
    results = soup.find_all('font', attrs={'size':'2'})
    module_name = results[MODULE_NAME_INDEX].get_text()
    module_name.rstrip()
    return module_name.rstrip()

def parse(timetable_html):

    soup = BeautifulSoup(timetable_html, 'html.parser')
    results = soup.find_all('td', attrs={'valign':'top'})
    if not results:
        return None
    days = []
    for day in results:
        days.append(parse_days(day))
    
    if all(day is None for day in days):
        return None

    timetable = Timetable(days)
    return timetable

def parse_days(day):

    lectures = day.find_all('font', attrs={'size':'1'})
    if not lectures:
        return None

    daily_lectures = []
    for lecture in lectures:
        lecture_raw = lecture.find('b').get_text()
        newstr = lecture_raw.replace('-','')
        attrs = newstr.split()
        if (str(attrs[3]) == 'LAB') or (str(attrs[3]) == 'TUT'):
            attrs[3] = attrs[3] + '-' + attrs[4]
            attrs[4] = attrs[5]

        start_time = datetime.strptime(attrs[0], "%H:%M")
        startTime = start_time.strftime("%H:%M")
        end_time = datetime.strptime(attrs[1], "%H:%M")
        endTime = end_time.strftime("%H:%M")
        lecture_attr = Lecture(startTime, endTime, attrs[2], attrs[3], attrs[4])
        daily_lectures.append(lecture_attr)
    
    return daily_lectures

def log_error(e):

    print(e)
